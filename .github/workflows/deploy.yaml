name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK for Maven build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build with Maven and SonarQube analysis
      - name: Build with Maven and SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn clean package sonar:sonar \
            -Dsonar.projectKey=my-project \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      # Step 4: Upload artifact to Nexus
      - name: Upload JAR to Nexus
        env:
          NEXUS_URL: ${{ secrets.NEXUS_URL }}
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file target/*.jar \
            $NEXUS_URL/repository/maven-releases/com/example/my-app/1.0.0/my-app-1.0.0.jar

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t my-app:latest .

      # Step 6: Install Trivy and scan the image
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.52.2_Linux-64bit.deb

      - name: Scan image with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL my-app:latest

      # Step 7: Tag and push image to Public ECR
      - name: Tag and push image to Public ECR
        env:
          PUBLIC_ECR_URL: ${{ secrets.PUBLIC_ECR_URL }}
        run: |
          docker tag my-app:latest $PUBLIC_ECR_URL:latest
          docker push $PUBLIC_ECR_URL:latest

      # Step 8: Deploy to Kubernetes via Bastion Host
      - name: Deploy to Kubernetes
        env:
          BASTION_HOST: ${{ secrets.BASTION_HOST }}
          BASTION_USER: ${{ secrets.BASTION_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.BASTION_KEY }}
          PUBLIC_ECR_URL: ${{ secrets.PUBLIC_ECR_URL }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -i private_key.pem -o StrictHostKeyChecking=no $BASTION_USER@$BASTION_HOST << 'EOF'
            echo "[INFO] Checking pre-deployment pod status..."
            kubectl get pods -n github-vamshi || true

            echo "[INFO] Describing problematic pods (if any)..."
            kubectl describe pod -l app=my-app -n github-vamshi || true

            echo "[INFO] Updating deployment image..."
            kubectl set image deployment/my-app my-app=${{ secrets.PUBLIC_ECR_URL }}:latest -n github-vamshi || true

            echo "[INFO] Waiting for rollout to complete..."
            kubectl rollout status deployment/my-app -n github-vamshi --timeout=90s || true

            echo "[INFO] Fetching logs from new pods..."
            for pod in $(kubectl get pods -l app=my-app -o jsonpath='{.items[*].metadata.name}' -n github-vamshi); do
              echo "[LOGS for \$pod]"
              kubectl logs \$pod -n github-vamshi || true
            done
          EOF

          rm private_key.pem
