name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: java-form-app
      REGION: eu-west-1

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: SonarQube Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.projectKey=${{ github.repository }} \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Upload Artifact to Nexus
      run: |
        curl -v -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" \
          --upload-file target/*.jar \
          "${{ secrets.NEXUS_URL }}/repository/maven-releases/com/example/java-form-app/1.0.0/java-form-app-1.0.0.jar"

    - name: Build Docker Image
      run: docker build -t $IMAGE_NAME .

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy -y

    - name: Scan Docker Image with Trivy
      run: trivy image --severity CRITICAL,HIGH $IMAGE_NAME

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region $REGION | \
        docker login --username AWS --password-stdin ${{ secrets.ECR_REPO_URI }}

    - name: Tag and Push Image to ECR
      run: |
        docker tag $IMAGE_NAME:latest ${{ secrets.ECR_REPO_URI }}:latest
        docker push ${{ secrets.ECR_REPO_URI }}:latest

    - name: Deploy to K8s via Bastion
      env:
        PRIVATE_KEY: ${{ secrets.BASTION_KEY }}
      run: |
        echo "$PRIVATE_KEY" | base64 -d > bastion_key.pem
        chmod 600 bastion_key.pem

        ssh -o StrictHostKeyChecking=no -i bastion_key.pem ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} << 'EOF'
          export KUBECONFIG=~/.kube/config
          kubectl set image deployment/java-form-app java-form-app=${{ secrets.ECR_REPO_URI }}:latest --record
          kubectl rollout status deployment/java-form-app
        EOF
