name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK for Maven build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build with Maven and SonarQube analysis
      - name: Build with Maven and SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn clean package sonar:sonar \
            -Dsonar.projectKey=my-project \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t my-app:latest .

      # Step 5: Install Trivy and scan the image
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.52.2/trivy_0.52.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.52.2_Linux-64bit.deb

      - name: Scan image with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL my-app:latest

      # Step 6: Log in to AWS ECR
      - name: Log in to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL

      # Step 7: Tag and push image to ECR
      - name: Tag and push image to ECR
        env:
          ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
        run: |
          docker tag my-app:latest $ECR_REPO_URL:latest
          docker push $ECR_REPO_URL:latest

      # Step 8: Deploy to Kubernetes via bastion host
      - name: Deploy to Kubernetes
        env:
          BASTION_HOST: ${{ secrets.BASTION_HOST }}
          BASTION_USER: ${{ secrets.BASTION_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.BASTION_KEY }}
          ECR_REPO_URL: ${{ secrets.ECR_REPO_URL }}
        run: |
          # Set up SSH key for bastion host
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Update Kubernetes deployment with new image
          ssh -i private_key.pem $BASTION_USER@$BASTION_HOST << 'EOF'
            kubectl set image deployment/my-app my-app=$ECR_REPO_URL:latest --namespace default
            kubectl rollout status deployment/my-app --namespace default
          EOF

          # Clean up
          rm private_key.pem
